package db.operation.hib.dao;

import static org.junit.Assert.*;

import java.util.List;

import org.junit.Before;
import org.junit.Test;

import db.entity.Employee;
import db.operation.DatabaseOperations;
import db.operation.EmployeesManagement;

/**
 * Class to test functionality of EmployeeDao.
 * 
 * @author Mateusz Mucha
 *
 */
public class EmployeeDaoTest {
	private EmployeeDao dao;
	private EmployeesManagement management;
	private DatabaseOperations<Employee> databaseOperations;
	private final String testString_1 = "TEST_1";
	private final String testString_2 = "TEST_2";
	private final String testString_3 = "TEST_3";
	private final String avatarTest = "";
	private final String evidenceNumberTest = "I001";
	private final int idToTest = 1;
	private final int departmentId = 1;

	/**
	 * Method set up three possible ways to run operations on database by
	 * hibvernate of DAO type.
	 * 
	 * @throws Exception
	 */
	@Before
	public void setUp() throws Exception {
		this.dao = new EmployeeDao();
		this.management = new EmployeeDao();
		this.databaseOperations = new EmployeeDao();
	}

	/**
	 * Method to test saving entity to database by using 3 possible ways.
	 */
	@Test
	public void saveTest() {
		Employee test = new Employee();
		test.setFirstName(testString_1);

		Employee test_1 = dao.save(test);
		assertEquals(testString_1, test.getFirstName());
		assertEquals(testString_1, dao.findById(test_1.getId()).get().getFirstName());

		test.setFirstName(testString_2);
		Employee test_2 = management.save(test);
		assertEquals(testString_2, test_2.getFirstName());
		assertEquals(testString_2, dao.findById(test_2.getId()).get().getFirstName());

		test.setFirstName(testString_3);
		Employee test_3 = databaseOperations.save(test);
		assertEquals(testString_3, test_3.getFirstName());
		assertEquals(testString_3, dao.findById(test_3.getId()).get().getFirstName());
	}

	/**
	 * Method to test updating entity to database by using 3 possible ways.
	 */
	@Test
	public void updateTest() {
		Employee test = new Employee();
		test.setFirstName(testString_1);

		Employee test_1 = dao.save(test);
		assertEquals(testString_1, dao.findById(test_1.getId()).get().getFirstName());
		test_1.setFirstName(testString_2);

		Employee test_2 = dao.save(test_1);
		assertEquals(testString_2, dao.findById(test_2.getId()).get().getFirstName());

		test = new Employee();
		test.setFirstName(testString_1);

		test_1 = management.save(test);
		assertEquals(testString_1, management.findById(test_1.getId()).get().getFirstName());
		test_1.setFirstName(testString_2);

		test_2 = management.save(test_1);
		assertEquals(testString_2, management.findById(test_2.getId()).get().getFirstName());

		test = new Employee();
		test.setFirstName(testString_1);

		test_1 = databaseOperations.save(test);
		assertEquals(testString_1, databaseOperations.findById(test_1.getId()).get().getFirstName());
		test_1.setFirstName(testString_2);

		test_2 = databaseOperations.save(test_1);
		assertEquals(testString_2, databaseOperations.findById(test_2.getId()).get().getFirstName());
	}

	/**
	 * Method to test delete entity to database by using 3 possible ways.
	 */
	@Test
	public void deleteTest() {
		Employee test = dao.findById(idToTest).get();
		dao.delete(test);
		assertNull(dao.findById(idToTest).get());

		test = management.findById(idToTest).get();
		management.delete(test);
		assertNull(management.findById(idToTest).get());

		test = databaseOperations.findById(idToTest).get();
		databaseOperations.delete(test);
		assertNull(databaseOperations.findById(idToTest).get());
	}

	/**
	 * Method to test finding by identificator entity to database by using 3
	 * possible ways.
	 */
	@Test
	public void findByIdTest() {
		Employee test = dao.findById(idToTest).get();
		assertNotNull(test);
		assertNotNull(test.getManagerId());
		assertNotNull(test.getFirstName());
		assertNotNull(test.getLastName());
		assertNotNull(test.getEvidenceNumber());

		test = management.findById(idToTest).get();
		assertNotNull(test);
		assertNotNull(test.getManagerId());
		assertNotNull(test.getFirstName());
		assertNotNull(test.getLastName());
		assertNotNull(test.getEvidenceNumber());

		test = databaseOperations.findById(idToTest).get();
		assertNotNull(test);
		assertNotNull(test.getManagerId());
		assertNotNull(test.getFirstName());
		assertNotNull(test.getLastName());
		assertNotNull(test.getEvidenceNumber());
	}

	/**
	 * Method to test if entity exist in database entity to database by using 3
	 * possible ways.
	 */
	@Test
	public void existsByIdTest() {
		assertTrue(dao.existsById(idToTest));
		assertTrue(management.existsById(idToTest));
		assertTrue(databaseOperations.existsById(idToTest));
	}

	/**
	 * Method to test finding all entities from database by using 3 possible
	 * ways.
	 */
	@Test
	public void findAllTest() {
		Iterable<Employee> iterator_1 = dao.findAll();
		assertNotNull(iterator_1);

		Iterable<Employee> iterator_2 = management.findAll();
		assertNotNull(iterator_2);

		Iterable<Employee> iterator_3 = databaseOperations.findAll();
		assertNotNull(iterator_3);
	}

	/**
	 * Method to find employee by evidence number
	 */
	@Test
	public void findByEvidenceNumberTest() {
		Employee emp_1 = dao.findByEvidenceNumber(evidenceNumberTest);
		assertNotNull(emp_1);
		assertEquals("Mateusz", emp_1.getFirstName());
		assertEquals("Mateusz", emp_1.getLastName());

		Employee emp_2 = management.findByEvidenceNumber(evidenceNumberTest);
		assertNotNull(emp_2);
		assertEquals("Mateusz", emp_2.getFirstName());
		assertEquals("Mateusz", emp_2.getLastName());
	}

	/**
	 * Method to find all emplyoees which are managers.
	 */
	@Test
	public void findAllManagersTest() {
		List<Employee> list_1 = dao.findAllManagers();
		assertNotNull(list_1);

		List<Employee> list_2 = management.findAllManagers();
		assertNotNull(list_2);
	}

	/**
	 * Method to find all employees from department.
	 */
	@Test
	public void findAllByDepartmentIdTest() {
		List<Employee> list_1 = dao.findAllByDepartmentId(departmentId);
		assertNotNull(list_1);

		List<Employee> list_2 = management.findAllByDepartmentId(departmentId);
		assertNotNull(list_2);
	}

	/**
	 * Method to find all employees from department without one of them e.g. if
	 * is a manager.
	 */
	@Test
	public void findAllByDepartmentIdAndIdNotTest() {
		List<Employee> list_1 = dao.findAllByDepartmentIdAndIdNot(departmentId, idToTest);
		assertNotNull(list_1);

		List<Employee> list_2 = management.findAllByDepartmentIdAndIdNot(departmentId, idToTest);
		assertNotNull(list_2);
	}

	/**
	 * Method to get full name of employee
	 */
	@Test
	public void findFullNameByIdTest() {
		String emp_1 = dao.findFullNameById(idToTest);
		assertNotNull(emp_1);
		assertEquals("Mateusz Mucha", emp_1);

		String emp_2 = management.findFullNameById(idToTest);
		assertNotNull(emp_2);
		assertEquals("Mateusz Mucha", emp_1);
	}

	/**
	 * Method to get avatar of employee
	 */
	@Test
	public void findAvatarByIdTest() {
		String emp_1 = dao.findAvatarById(idToTest);
		assertNotNull(emp_1);
		assertEquals(avatarTest, emp_1);

		String emp_2 = management.findAvatarById(idToTest);
		assertNotNull(emp_2);
		assertEquals(avatarTest, emp_1);
	}

	/**
	 * Method to get department of employee
	 */
	@Test
	public void findDepartmentIdByIdTest() {
		Integer emp_1 = dao.findDepartmentIdById(idToTest);
		assertNotNull(emp_1);
		assertEquals("IT", emp_1);

		Integer emp_2 = management.findDepartmentIdById(idToTest);
		assertNotNull(emp_2);
		assertEquals("IT", emp_1);
	}

	/**
	 * Method to get position of employee.
	 */
	@Test
	public void findPositionIdByIdTest() {
		Integer emp_1 = dao.findPositionIdById(idToTest);
		assertNotNull(emp_1);
		assertEquals("Administrator", emp_1);

		Integer emp_2 = management.findPositionIdById(idToTest);
		assertNotNull(emp_2);
		assertEquals("Administrator", emp_1);
	}

	/**
	 * Method to get manager of employee
	 */
	@Test
	public void findManagerIdByIdTest() {
		Integer emp_1 = dao.findManagerIdById(4);
		assertNotNull(emp_1);
		assertEquals(idToTest, emp_1.intValue());

		Integer emp_2 = management.findManagerIdById(4);
		assertNotNull(emp_2);
		assertEquals(idToTest, emp_1.intValue());
	}

	/**
	 * Method to change password of employee
	 */
	@Test
	public void changePasswordTest() {
		dao.changePassword(testString_1, 14);
		assertEquals(testString_1, dao.findById(14).get().getPassword());

		management.changePassword(testString_2, 14);
		assertEquals(testString_2, management.findById(14).get().getPassword());
	}

}
